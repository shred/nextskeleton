#!/usr/bin/env python3
#
# nextskeleton - An assembler skeleton for the ZX Spectrum Next
#
# Copyright (C) 2020 Richard "Shred" KÃ¶rber
#   https://codeberg.org/shred/nextskeleton
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import os
from pathlib import Path
import re
import shutil
import sys

def replaceInFile(file, replacements):
    with open(file, 'r') as f:
        content = f.read()
    for k, v in replacements.items():
        content = content.replace('{{' + k + '}}', v)
    with open(file, 'w') as f:
        f.write(content)

parser = argparse.ArgumentParser(description='Creates a new ZX Spectrum Next project')
parser.add_argument('-s', '--size',
            dest='size',
            metavar='SIZE',
            default='1G',
            help='Size of the MMC card, e.g. "1G" (default) or "512M"')
parser.add_argument('-u', '--url',
            dest='url',
            metavar='URL',
            default='http://www.zxspectrumnext.online/sn-lite-v.1.3.2.zip',
            help='URL of the ZX Spectrum Next distribution ZIP file to be used')
parser.add_argument('-d', '--dir',
            dest='dir',
            metavar='TARGET',
            help='Destination directory for the project')
parser.add_argument('name',
            help='Name of the project, only up to 20 ASCII letters and numbers!')
args = parser.parse_args()

# Is it a valid project name?
if not re.fullmatch('[a-zA-Z0-9][a-zA-Z0-9_+.-]{0,31}', args.name):
    print('Project name {} is invalid. Use only up to 20 ASCII letters and numbers.'.format(args.name), file=sys.stderr)
    exit(1)

# Check the image size
if not re.fullmatch(r'[0-9]*[1-9][MG]', args.size):
    print('An MMC size of {} is invalid. Valid values are e.g "512M" or "1G".'.format(args.size), file=sys.stderr)
    exit(1)

# Check the URL
if not re.fullmatch(r'https?://.*/.*\.zip', args.url):
    print('The distribution URL {} is invalid. It must be http or https, and point to a ZIP file.'.format(args.url), file=sys.stderr)
    exit(1)

# Is there already a file or directory of that name?
targetPath = Path((args.dir + '/' if args.dir is not None else '') + args.name)
if targetPath.exists():
    print('There is already a file named {} here.'.format(args.name), file=sys.stderr)
    exit(1)

# Create the replacement dictionary
replacements = dict()
replacements['project'] = args.name
replacements['sdsize'] = args.size
replacements['disturl'] = args.url

# Copy the skeleton to the target directory
sourcePath = Path(os.path.abspath(os.path.dirname(sys.argv[0])), 'skeleton')
shutil.copytree(sourcePath, targetPath)

# Fix the example source
sourceCodePath = targetPath.joinpath('src').joinpath('helloworld.asm')
replaceInFile(sourceCodePath, replacements)
sourceCodePath.rename(targetPath.joinpath('src').joinpath(args.name + '.asm'))

# Fix the build.xml
buildPath = targetPath.joinpath('build.xml')
replaceInFile(buildPath, replacements)

print('A project called {} has been created. Have fun!'.format(args.name))
